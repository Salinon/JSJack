<h3>The End!</h3>
<p>Congratulations! You've completed our tutorial. You now have an awesome Blackjack-playing computer program, written by you, as well as lots of knowledge about programming.</p>
<p>Think about all the stuff you've learned: You can use if-else statements to make the computer do different things under different circumstances. You can use loops to make it repeat tasks. You can make it do math. You can store information. You can write functions to make all your programming easier. And best of all, you've learned how to think about everyday problems and figure out how to make a computer solve them.</p>
<p>So what do you do now? If you'd like to keep playing around with this Blackjack program, there is always more that can be done! You can tweak the numbers in your code to change how your program hits, stands, bets, and doubles down to figure out what will make you the most money. You can try implementing more complicated and better card counting methods such as the <a href="http://www.blackjacktactics.com/blackjack/strategy/card-counting/hi-opt-ii/" target="_blank">Hi-Opt II method</a> that we suggested earlier. You can also try implementing different types of betting strategies, such as the <a href="http://www.onlineblackjackguru.com/Martingale-Blackjack-Strategy.html" target="_blank">Martingale strategy</a>. You'll notice that most of these strategies require knowing if you won the last hand. We'll set a boolean called <span class="variables">wonLastHand</span> to true when you win a hand and to false when you lose. You know everything you need to to make this strategy work! Have fun! (And comment your code!)</p>
<p>The entire program that we wrote during this tutorial can be seen at the bottom of this page. If you ever accidentally mess something up and your program stops working, take a look at this code to fix it.</p>
<p>If you're sick of Blackjack, there are many other programming tutorials on the Internet that will give you more practice and teach you more advanced concepts. You now know a lot about JavaScript, but that doesn't mean you have to keep using JavaScript! There are many different programming languages around, such as Python, Ruby, Java, C, and PHP, that you could also learn. The syntax will be different, but the theory and logic behind them is still the same.</p>
<p>Thanks for playing, and happy coding!</p>

<div class="code">
var name = "[NAME]"; 

//card counting
if(handEnd){ 
	var cardCountVal = []; //declare array for card count values
	//reset card count when deck is reshuffled
	if(reshuffled){ 
		cardCount = 0; 
	}
	//make array of card counting values
	assignCardCountVals(2, 6, 1); 
	assignCardCountVals(7, 9, 0);
	assignCardCountVals(10, 11, -1);
	
	//count the cards
	countCards(handValue);
	countCards(dealerHandValue);
}
//bet
else if(handStart){
	var cardCountBet = cardCount + 21;
    safeBet(cardCountBet, 0);
}
else{	
	//account for Aces being 1 or 11
	var haveAce = false; 
	var numberOfAces = aceCount(handValue);
	var highValue = highestValue(numberOfAces);
	if(aceCount(handVal) &gt; 0){ 
		haveAce = true; 
	}
	//see if you should double down
	if(dealerUpCard() &lt; 7 &amp;&amp; (totalValue() === 10 || totalValue() === 11)){
		doubleDown();
	}
	//see if you should hit
	else if(dealerUpCard() &gt; 6 &amp;&amp; ((totalValue() &lt; 17 &amp;&amp; !haveAce) || 
    	(highValue &lt; 18 &amp;&amp; haveAce))){ 
		hit();									
	}
	//see if you should hit part 2
	else if(dealerUpCard() &lt;= 6 &amp;&amp; totalValue() &lt; 12){ 
		hit();
	}
	//otherwise, stand
	else{
		stand();
	}
}
//returns the highest non-busting value of a hand with Aces
//takes the number of Aces in your hand as a parameter
//could rewrite to take totalValue() as a parameter so it could check other hands
function highestValue(aces){
	var highVal = totalValue(); 
	var counter = 0;
	for(counter = 1; counter &lt;= aces; counter++){ 
		if(highVal &gt; 21){ 
			highVal -= 10; 
		}
	}
	return highestValue; 
}
//returns the number of Aces in a hand
//takes the hand as a parameter
function aceCount(hand){
	var aces = 0;
	var counter = 0;
	for(counter = 0; counter &lt; sizeof(hand); counter++){ 
		if(hand[counter] === 11){ 
			aces++;	
		}
	}
	return aces; 
}
//returns the total value of all the cards in your hand
//could rewrite to take handValue as a parameter so it could find the value 
	//of other hands
function totalValue(){
	var length = handValue.length; 
	var sum = 0;
    var counter = 0;
	for(counter = 0; counter &lt; length; counter++){
		sum += handValue[counter]; 
	}
	return sum;
}
//bets an amount of money that won't make your total money fall below a 
	//certain value
//parameter betAmount is the amount you want to bet, &limit is the value 
	//you don't want to fall below
//the amount bet will be betAmount minus some value so you don't fall below limit
function safeBet(betAmount, limit){
	if(totalMoney() - betAmount &lt; limit){ 
		betAmount = totalMoney() - limit;
	}
	bet(betAmount);
}
//creates an array of card count values for every card in the deck
//parameter start is the first card you want to assign to a particular value, 
	//end is the last, and val is the value to assign
function assignCardCountVals(start, end, val){ 
	var counter = 0;
	for(counter = start; counter &lt;= end; counter++){
		cardCountVal[counter] = val;
	}
}
//counts the cards in a particular hand based off the cardCountVal array
//parameter hand is the hand you want to count			
function countCards(hand){
	var counter = 0;
	for(counter = 0; counter &lt; sizeof(hand); counter++){ 
		cardCount += cardCountVal[hand[counter]]; 
	}
}					

</div>